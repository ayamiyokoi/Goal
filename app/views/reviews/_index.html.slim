- if reviews.present?
  .table.pc_only
    table
      thead
        tr
          th
            | ユーザー
          th
            | 達成率
          th
            | 本日の振り返り(反省）
          th
            | 明日の目標
          th
            | トピック題名
          th
            | コメント数
          th
            | いいね数
          th
            | 公開ステータス
          th[colspan="3"]
      tbody
        - reviews.each do |review|
          tr
            /アソシエ―ションしたため不要
             /- review = Review.find_by(user_id: review.friend_id) if review.class == Friend
             /- review = Review.find_by(user_id: review.id) if review.class == User
            - unless review.user == current_user
              td
                = attachment_image_tag review.user, :profile_image, size: '60x60', format: 'jpeg', fallback: "no_image.jpg", class: "img"
            td
              = review.rate
              | %
            td
              = truncate(review.review, length:25)
            td
              = truncate(review.plan, length:25)
            td
              = review.title
            td
              = link_to "#{review.comments.count} 件", review_path(review.id)
            td
              = review.liked_users.count
            td
              - if review.active == true
                |  公開
              - else
                |  非公開
            td
              = link_to '詳細', review, class: "btn btn-outline-primary"
            - if review.written_by?(current_user)
              td
                = link_to '編集', edit_review_path(review), class: "btn btn-outline-success"
              td
                = link_to '削除', review, method: :delete, data: { confirm: '本当に削除しますか?' }, class: "btn btn-outline-danger"
  .sp_only
    - reviews.each do |review|
      .colum_index
        ul[style="list-style:none;display:flex;padding:0;"]
          li[style ="margin:-20px 10px -35px -35px"]
            = attachment_image_tag review.user, :profile_image, size: '50x50', format: 'jpeg', fallback: "no_image.jpg", class: "img"
          li.margin
            = review.created_at.strftime("%m/%d")
          li
            | 達成率:
            = review.rate
            | %
        p
          | 振り返り:
          = truncate(review.review, length:25)
        p
          | 明日の目標:
          = truncate(review.plan, length:25)
        hr
        ul[style="list-style:none;display:flex;padding:0;margin-bottom:0;"]
          li.margin.blue
            - if review.active == true
              i.fas.fa-eye
            - else
              i.fas.fa-eye-slash
          li
            = link_to review, class: "blue margin" do
              i.fas.fa-sign-in-alt
          - if review.written_by?(current_user)
            li
              = link_to edit_review_path(review), class: "green margin" do
                i.far.fa-edit
            li
              = link_to review, method: :delete, data: { confirm: '本当に削除しますか?' }, class: "red margin" do
                i.fas.fa-trash-alt
          #likes_buttons.margin
            = render partial: 'likes/like', locals: { review: review}
          p
            = link_to review do
              i.far.fa-comment
              = review.comments.count
  = paginate reviews
- else
  p[style="padding:20px;color:blue;"]
    | データが登録されていません。
